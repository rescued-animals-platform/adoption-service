apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'info.solidsoft.pitest'

group 'ec.animal.adoption'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    springBootVersion = "2.0.1.RELEASE"
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0")
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("org.apache.commons:commons-lang3:3.7")
}

pitest {
    targetClasses = ['ec.animal.adoption.*']
    excludedClasses = ['ec.animal.adoption.AnimalAdoptionApplication']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timeoutConstInMillis = 5000
}

idea {
    module {
        testSourceDirs += file('src/integration/java')

        iml {
            withXml {
                def testResourceFolders = it.asNode().component.content.sourceFolder
                        .findAll { it.@url in ['file://$MODULE_DIR$/src/test/resources'] }
                testResourceFolders.each { resourceFolder ->
                    def atts = resourceFolder.attributes()
                    atts.remove('isTestSource')
                    atts.put('type', 'java-test-resource')
                }
                def mainResource = it.asNode().component.content.sourceFolder
                        .find { it.@url == 'file://$MODULE_DIR$/src/main/resources' }
                        .attributes()
                mainResource.remove('isSource')
                mainResource.put('type', 'java-resource')
            }
        }
    }
}