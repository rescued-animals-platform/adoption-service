version: 2.1

####################
# Orbs & Executors
####################

orbs:
  heroku: circleci/heroku@1.2.6

executors:
  builder:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo

####################
# Jobs
####################

jobs:
  build:
    executor: builder

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run: make unit-test

      - run: ./gradlew bootJar --rerun-tasks

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/test/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

      - persist_to_workspace:
          root: ~/repo
          paths:
            - src
            - migrations
            - terraform
            - pmd
            - scripts
            - docker
            - gradle
            - build.gradle
            - settings.gradle
            - gradlew
            - gradlew.bat
            - Dockerfile
            - docker-compose.yaml
            - Makefile
            - Procfile
            - system.properties
            - .gitignore
            - .git
            - build/reports/jacoco

  pitest:
    executor: builder

    steps:
      - attach_workspace:
          at: ~/repo

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run:
          name: Run pitest analysis
          command: ./gradlew clean pitest

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - store_artifacts:
          path: build/reports/pitest

  sonar:
    executor: builder

    steps:
      - attach_workspace:
          at: ~/repo

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run:
          name: Analyze code on SonarCloud
          command: ./gradlew sonarqube

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

  integration-test:
    executor: builder

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run:
          name: Running integration tests
          command: make integration-test

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/integrationTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  api-test:
    executor: builder

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run:
          name: Running api tests
          command: make api-test

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/apiTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  deploy-uat:
    executor: heroku/default

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo

      - heroku/deploy-via-git:
          app-name: servicio-adopciones-uat

      - heroku/install

      - run:
          name: Scaling app
          command: heroku ps:scale --app servicio-adopciones-uat web=1

  uat-integration-test:
    executor: builder

    steps:
      - attach_workspace:
          at: ~/repo

      - heroku/install

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run:
          name: Running integration tests in uat environment
          command: |
            {
              CLOUDINARY_URL="$(heroku config:get CLOUDINARY_URL -a servicio-adopciones-uat)";
              SPRING_DATASOURCE_USERNAME="$(heroku run -a servicio-adopciones-uat echo \$SPRING_DATASOURCE_USERNAME)";
              SPRING_DATASOURCE_PASSWORD="$(heroku run -a servicio-adopciones-uat echo \$SPRING_DATASOURCE_PASSWORD)";
              SPRING_DATASOURCE_URL="$(heroku run -a servicio-adopciones-uat echo \$SPRING_DATASOURCE_URL)";
            } &> /dev/null
            export CLOUDINARY_URL;
            export SPRING_DATASOURCE_URL;
            export SPRING_DATASOURCE_USERNAME;
            export SPRING_DATASOURCE_PASSWORD;
            export SPRING_PROFILE=uat;
            export ADOPTION_SERVICE_URL=https://servicio-adopciones-uat.herokuapp.com;
            ./gradlew integrationTest --rerun-tasks

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/integrationTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  uat-api-test:
    executor: builder

    steps:
      - attach_workspace:
          at: ~/repo

      - heroku/install

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run:
          name: Running api tests in uat environment
          command: |
            {
              CLOUDINARY_URL="$(heroku config:get CLOUDINARY_URL -a servicio-adopciones-uat)";
              SPRING_DATASOURCE_USERNAME="$(heroku run -a servicio-adopciones-uat echo \$SPRING_DATASOURCE_USERNAME)";
              SPRING_DATASOURCE_PASSWORD="$(heroku run -a servicio-adopciones-uat echo \$SPRING_DATASOURCE_PASSWORD)";
              SPRING_DATASOURCE_URL="$(heroku run -a servicio-adopciones-uat echo \$SPRING_DATASOURCE_URL)";
            } &> /dev/null
            export CLOUDINARY_URL;
            export SPRING_DATASOURCE_URL;
            export SPRING_DATASOURCE_USERNAME;
            export SPRING_DATASOURCE_PASSWORD;
            export SPRING_PROFILE=uat;
            export ADOPTION_SERVICE_URL=https://servicio-adopciones-uat.herokuapp.com;
            ./gradlew apiTest --rerun-tasks

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/integrationTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

####################
# Workflows
####################

workflows:
  version: 2
  adoption-service-pipeline:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - pitest:
          requires:
            - build
          filters:
            branches:
              only: master
      - sonar:
          context: SonarCloud
          requires:
            - build
          filters:
            branches:
              only: master
      - integration-test:
          requires:
            - build
          filters:
            branches:
              only: master
      - api-test:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-uat:
          requires:
            - pitest
            - sonar
            - integration-test
            - api-test
          filters:
            branches:
              only: master
      - uat-integration-test:
          requires:
            - deploy-uat
          filters:
            branches:
              only: master
      - uat-api-test:
          requires:
            - uat-integration-test
          filters:
            branches:
              only: master