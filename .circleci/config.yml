version: 2.1

####################
# Parameters
####################

parameters:
  start-deployment:
    type: boolean
    default: false

####################
# Executors
####################

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: emmeblm/adoption-service
    docker:
      - image: circleci/buildpack-deps:stretch
    working_directory: ~/repo

  code-builder:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo

  integration-tester:
    environment:
      SPRING_PROFILE: dev
      ADOPTION_SERVICE_URL: http://adoption-service:8080
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo

  ci-integration-tester:
    environment:
      SPRING_PROFILE: ci
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo

####################
# Jobs
####################

jobs:
  build:
    executor: code-builder

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run: ./gradlew dependencies

      - run: ./gradlew cleanTest test --rerun-tasks

      - run: ./gradlew bootJar --rerun-tasks

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/test/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

      - persist_to_workspace:
          root: ~/repo
          paths:
            - src
            - build
            - migrations
            - terraform
            - pmd
            - scripts
            - docker
            - gradle
            - build.gradle
            - settings.gradle
            - gradlew
            - gradlew.bat
            - Dockerfile
            - docker-compose.yaml
            - Makefile

  pitest:
    executor: code-builder

    steps:
      - attach_workspace:
          at: ~/repo

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run: ./gradlew clean pitest

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - store_artifacts:
          path: build/reports/pitest

  style-check:
    executor: code-builder

    steps:
      - attach_workspace:
          at: ~/repo

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run: make style-check

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - store_artifacts:
          path: build/reports/pmd

      - store_artifacts:
          path: build/reports/spotbugs

  integration-test:
    executor: integration-tester

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run:
          name: Running integration tests
          command: make builder-build integration-test

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/integrationTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  api-test:
    executor: integration-tester

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run:
          name: Running api tests
          command: make builder-build api-test

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/apiTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  publish-image:
    executor: docker-publisher

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - run:
          name: Build and Publish Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_SHA1
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$CIRCLE_SHA1;

  ci-infra-deploy:
    docker:
      - image: emmeblm/adoption-service-deployer:latest

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Deploy CI Infrastructure
          command: ./scripts/ci-infra-deploy.sh;

      - persist_to_workspace:
          root: ~/repo
          paths:
            - src
            - build
            - migrations
            - terraform
            - pmd
            - scripts
            - docker
            - gradle
            - build.gradle
            - settings.gradle
            - gradlew
            - gradlew.bat
            - Dockerfile
            - docker-compose.yaml
            - Makefile
            - env.properties

  ci-integration-test:
    executor: ci-integration-tester

    steps:
      - attach_workspace:
          at: ~/repo

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run:
          name: Running integration tests in ci environment
          command: ./scripts/ci-integration-test.sh

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/integrationTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  ci-service-deploy:
    docker:
      - image: emmeblm/adoption-service-deployer:latest

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Deploy service to CI
          command: ./scripts/ci-service-deploy.sh

      - persist_to_workspace:
          root: ~/repo
          paths:
            - env.properties

  ci-api-test:
    executor: ci-integration-tester

    steps:
      - attach_workspace:
          at: ~/repo

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "build.gradle" }}
            - v2-dependencies-

      - run:
          name: Running api tests in ci environment
          command: ./scripts/ci-api-test.sh

      - save_cache:
          paths:
            - ~/.gradle
          key: v2-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/apiTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  ci-service-undeploy:
    docker:
      - image: emmeblm/adoption-service-deployer:latest

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Un deploying service in CI
          command: ./scripts/ci-service-undeploy.sh

  ci-infra-undeploy:
    docker:
      - image: emmeblm/adoption-service-deployer:latest

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Un deploying CI Infrastructure
          command: ./scripts/ci-infra-undeploy.sh;


####################
# Workflows
####################

workflows:
  version: 2
  adoption-service-pipeline:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - pitest:
          requires:
            - build
          filters:
            branches:
              only: master
      - style-check:
          requires:
            - build
          filters:
            branches:
              only: master
      - integration-test:
          requires:
            - build
          filters:
            branches:
              only: master
      - api-test:
          requires:
            - build
          filters:
            branches:
              only: master
      - publish-image:
          requires:
            - pitest
            - style-check
            - integration-test
            - api-test
          filters:
            branches:
              only: master
  adoption-service-deployment-pipeline:
    when: << pipeline.parameters.start-deployment >>
    jobs:
      - ci-infra-deploy:
          filters:
            branches:
              only: master
      - ci-integration-test:
          requires:
            - ci-infra-deploy
          filters:
            branches:
              only: master
      - ci-service-deploy:
          requires:
            - ci-infra-deploy
          filters:
            branches:
              only: master
      - ci-api-test:
          requires:
            - ci-service-deploy
          filters:
            branches:
              only: master
      - should-undeploy-ci-service:
          type: approval
          requires:
            - ci-api-test
            - ci-integration-test
          filters:
            branches:
              only: master
      - ci-service-undeploy:
          requires:
            - should-undeploy-ci-service
          filters:
            branches:
              only: master
      - should-undeploy-ci-infra:
          type: approval
          requires:
            - ci-service-undeploy
          filters:
            branches:
              only: master
      - ci-infra-undeploy:
          requires:
            - should-undeploy-ci-infra
          filters:
            branches:
              only: master