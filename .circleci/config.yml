# Java Gradle CircleCI 2.0 configuration file
version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-

      - run: ./gradlew dependencies

      - run: ./gradlew clean build

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/test/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

      - persist_to_workspace:
          root: ~/repo
          paths:
            - src
            - migrations
            - terraform
            - scripts
            - gradle
            - build.gradle
            - settings.gradle
            - gradlew
            - gradlew.bat

  pitest:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - attach_workspace:
          at: ~/repo

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          - v1-dependencies-

      - run: ./gradlew clean pitest

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - store_artifacts:
          path: build/reports/pitest

  integration-test:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: postgres:10
        environment:
          POSTGRES_DB: animal_adoption_db

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgress && exit 1

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-

      - run: sudo sh -c "echo '127.0.0.1      postgres' >> /etc/hosts"

      - run:
          name: Running integration tests
          command: ./gradlew integrationTest
          environment:
            SPRING_PROFILE: dev

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/integrationTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  api-test:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: postgres:10
        environment:
          POSTGRES_DB: animal_adoption_db

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgress && exit 1

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-

      - run: sudo sh -c "echo '127.0.0.1      postgres' >> /etc/hosts"

      - run:
          name: Running api tests
          command: ./gradlew apiTest
          environment:
            SPRING_PROFILE: dev

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/integrationTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  ci-storages-deploy:
      docker:
        - image: hashicorp/terraform

      working_directory: ~/repo

      steps:
        - attach_workspace:
            at: ~/repo

        - run:
            name: Deploy CI storages
            command: ./scripts/ci/ci-storages-deploy.sh

        - persist_to_workspace:
            root: ~/repo
            paths:
              - src/main/appengine/app.yaml

  ci-integration-test:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: postgres:10
        environment:
          POSTGRES_DB: animal_adoption_db

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgress && exit 1

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-

      - run:
          name: Runing integration tests
          command: ./scripts/ci/integration-test.sh

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex ".*/build/test-results/integrationTest/.*xml" -exec cp {} ~/junit \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  ci-service-deploy:
      docker:
        - image: google/cloud-sdk
          environment:
            GCLOUD_PROJECT_ID: adoption-service-ci-245106

      working_directory: ~/repo

      steps:
        - attach_workspace:
            at: ~/repo

        - restore_cache:
            keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-

        - run:
            name: Deploy service to CI
            command: ./scripts/ci/ci-service-deploy.sh

        - save_cache:
            paths:
              - ~/.gradle
            key: v1-dependencies-{{ checksum "build.gradle" }}


workflows:
  version: 2
  adoption-service:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - pitest:
          requires:
            - build
          filters:
            branches:
              only: master
      - integration-test:
          requires:
            - build
          filters:
            branches:
              only: master
      - api-test:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-to-ci:
          type: approval
          requires:
            - pitest
            - integration-test
            - api-test
          filters:
            branches:
              only: master
      - ci-storages-deploy:
          requires:
            - deploy-to-ci
          filters:
            branches:
              only: master
      - a-dummy-wait:
          type: approval
          requires:
            - ci-storages-deploy
          filters:
            branches:
              only: master
      - ci-integration-test:
          requires:
            - a-dummy-wait
          filters:
            branches:
              only: master
      - ci-service-deploy:
          requires:
            - ci-integration-test
          filters:
            branches:
              only: master
